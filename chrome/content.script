/*
CONTENT SCRIPT - gets added to raw pages
Do NOT modify, or change the file extension.
This contains an event listener added directly to a site's DOM.
The execution environment IS the website itself.
This serves as a means of communicating w/ our extension via listeners.
*/
/*
INJECT_SCRIPT: XSS script injection
circumvents Chrome's isolated world / content script DOM, which has limited permissions

FLOW EXPLAINED:
- BACKGROUND (extension) creates event messages w/ the CONTENT SCRIPT (which has limited RAW DOM access)
- Background sends a script for execution

- CONTENT Define an event listener based on the script ID (conflictless)

- Initialize a script tag with injection code to run in the RAW DOM
  - Begin with an async function wrapper
  - Promisify the script body
    - Await RETURN or REJECT
  - Create and dispatch an event listener, passing the promise return value
- Inject the script, which executes immediately
- Remove the script tag to hide the evidence.

- Function executes in RAW DOM, dispatches event, then falls out of scope. Poof.

- Event listener passes a message back the the BACKGROUND, our extension.

CONCLUSION:
*/
function INJECT_SCRIPT ({ id, title, body }) {
  /* EXECUTION ENVIRONMENT: RAW DOM -> CONTENT SCRIPT */
  // window.addEventListener(id, (e) => {
  //   const { detail } = e;
  //   console.warn(id, detail)
  //   /* EXECUTION ENVIRONMENT: CONTENT SCRIPT -> BACKGROUND (EXTENSION) */
  // }, { once: true });

  const element = document.createElement('script');
  /* EXECUTION ENVIRONMENT: RAW DOM */
  element.textContent = `(async function () {
    const execution = () => new Promise((RETURN, REJECT) => { ${body} });
    let response = await execution();
    var event = document.createEvent("CustomEvent");
    event.initCustomEvent("${id}", true, true, response);
    window.dispatchEvent(event);
  })();`;
  /* EXECUTION ENVIRONMENT: CONTENT SCRIPT -> RAW DOM */
  (document.head || document.documentElement).appendChild(element);
  element.parentNode.removeChild(element);
}

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('==SECURITY EXTENSION REQUEST==\n', request)
  const { type, body } = request || {}
  const { id } = sender || {}
  let response
  try {
    switch (type) {
      case 'script':
        /* EXECUTION ENVIRONMENT: RAW DOM -> CONTENT SCRIPT */
        const TEST = {
          id: 'ccc',
          title: 'Test C',
          body: `setTimeout(() => RETURN(3), 1000);`
        }
        window.addEventListener(TEST.id, (e) => {
          const { detail } = e;
          /* EXECUTION ENVIRONMENT: CONTENT SCRIPT -> BACKGROUND (EXTENSION) */
          console.warn(TEST.id, detail)
          sendResponse({ success: true, response: detail })
        }, { once: true });
        INJECT_SCRIPT(TEST);
        break
      case 'import':
        response = 'Import a package script placeholder'
        sendResponse({ success: true, response })
        break
      // default:
      //   response = 'Error: Unknown command'
      //   sendResponse({ success: false, response })
    }
  } catch (err) {
    console.error(err)
    response = { 'ERROR': err.message }
    sendResponse({ success: false, response })
  }
})

//  Resume sandbox testing for this:
/*
function INJECT_SCRIPT (script) {
  //  Create a script element on the target dom with a self executing function
  //  Add an event listener that returns the result. Remove the evidence.
  const scr = document.createElement('script')
  scr.textContent = `(function () {
    const result = (function () { ${script} })();
    const event = document.createEvent('CustomEvent');
    event.initCustomEvent('INJECT_SCRIPT', true, true, result);
    window.dispatchEvent(event);
  })();`;
  (document.head || document.documentElement).appendChild(scr)
  scr.parentNode.removeChild(scr)
}

//  Listen for the response
window.addEventListener('INJECT_SCRIPT', e => {
  const response = e.detail
  console.log('RESPONSE', response)
})

//  TEST
INJECT_SCRIPT('return 9001;')
*/

/*
var actualCode = `
var someFixedRandomValue = ${Math.random()};
console.warn(someFixedRandomValue);
`;

var script = document.createElement('script');
script.textContent = actualCode;
(document.head||document.documentElement).appendChild(script);
script.remove();
*/
